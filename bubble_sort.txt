#include <stdbool.h> // For bool
#include <stdlib.h> // For random 
#include <stdint.h> // For uintN_t types
#include <stdio.h> // for pintf
#include <math.h> // for no reason 
#include <time.h>

#define LENGTH_ARRAY 10000
#define SEED_RANDOM 83

void random_init(uint8_t* array, const uint32_t length)
{
	srand(SEED_RANDOM);

	for(uint32_t i = 0 ; i < length; ++i)
	{
		array[i] = rand();
	}
}

void show_array(uint8_t* array, const uint32_t length)
{
	printf("[");
	for(uint32_t i = 0 ; i < length; ++i)
	{
		printf("%u",array[i]);
		
		if(i < length - 1)
		{
			printf(",");
		}
	}
	printf("]\n");
	
}

void swap(uint8_t*  a, uint8_t* b)
{
    uint8_t tmp = *b;
    *b = *a;
    *a = tmp;
}

void bubble_sort(uint8_t* array, const uint32_t length)
{
	bool sorted;
	do{
		sorted = true;
		for(uint32_t i = 0 ; i < length - 1; ++i)
		{
			if(array[i] > array[i+1])
			{
				swap(&array[i],&array[i+1]);
				sorted = false;
			}
		}
	}while(!sorted);	
}

int main()
{
	uint8_t r_array[LENGTH_ARRAY];
	random_init(r_array,LENGTH_ARRAY);
	//show_array(r_array,LENGTH_ARRAY);
	
	//#####################################
	//
	//============= SORTING ==============
	//
	//#####################################
	
	clock_t start = clock();
	bubble_sort(r_array,LENGTH_ARRAY);
	float time_of_execution = (float)(clock() - start)/CLOCKS_PER_SEC;
	printf("Sorting took %fs\n",time_of_execution);
	
	//show_array(r_array,LENGTH_ARRAY);
	
	return 1;
}
